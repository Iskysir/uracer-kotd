Hi guys!
I've been slowly working on uRacer on and off, at night, after my daily work, for slightly more than a year.

It just started as an [url=http://www.reddit.com/r/androiddev/comments/nzufs/hey_randroiddev_im_developing_a_topdown_racer_and/]Android project[/url], targeting tablets and smartphones, but then i liked the idea of a desktop version so much that i decided to target the PC first :)
If you are curious about the initial Android prototype, i uploaded a video on [url=http://www.youtube.com/watch?v=OGUKLCTq6SY]YouTube[/url] back then.

Here instead is my latest dev build running on my desktop: despite running at 60fps, there is some stutter in the video at times because i had to encode it at 30fps for a better playing on YouTube: also the audio i had to mux it apart, so there could be some minor delay issues :)

[img]http://i2.ytimg.com/vi/ivW6Q5ml8Ds/hqdefault.jpg[/img]

The idea is to have a single-player mode for practicing the tracks and racing against yourself, and a multi-player mode for racing against other players' replays.

[s]After choosing the track, your vehicle choice will determine the class of racers that you'll race against to: faster cars are more difficult to drive and requires the track to be memorized first.[/s] (unsure, still thinking about it)

The player performing the track in less time wins, but not only that: the more time you *drift*, the more time you *earn*: you can then consume it by activating the *time dilation mode* at any point in your race, to slow down time and perform minor adjustments to your car's trajectory.

Multiplayer mode is similar, but your replays are being sync'd automatically at the end of each lap, then the player rank is updated accordingly.

I'm thinking about the server-side architecture and the mechanisms: since i want it to be simple and scalable i'll have to at least try implement a couple of ideas and see how they perform. Code maintenance is a must and Python+WSGI looks like a pretty cool thing to experiment with, but i'll see because Node.js looks like a good candidate too, so if anyone has experience with something similar please let me know your impressions as well!

It currently lacks music, and only collisions and tire squealings are present as of now, and the tire sounds alone is quite boring, so please bear with me :)

Anyway, please tell me what you think and, most especially, what's your thoughts about its chances!

[b]<edited for more info>[/b]
Here's what i'm using for development:

[list]
[li]Java, GLES2 with [url=http://libgdx.badlogicgames.com/]libgdx[/url], the awesome game library![/li]
[li]libgdx's Box2d wrapper for physics[/li]
[li]box2dlights for lightmapping ([url=http://code.google.com/p/box2dlights/issues/attachmentText?id=4&aid=40007000&name=box2dlights-perlight-fixture-filtering-4.patch&token=SfNdLlOQ6bKUW1F3uMFCaDt-t04%3A1355168897236]+my patch[/url] , [url=http://code.google.com/p/box2dlights/issues/detail?id=4&can=1]discussion[/url])[/li]
[li]my open source libgdx's [url=http://manuelbua.github.com/libgdx-contribs/]post-processing library[/url] plus some unreleased patches and shaders (sure you can use this library in your projects as well!)[/li]
[/list]


[b]Simple[/b] level
[youtube]ivW6Q5ml8Ds[/youtube]

[b]Simple[/b] level (night mode)
[youtube]TnZqGbWmv6s[/youtube]

[b]Overlap[/b] level (night mode)
[youtube]75rHkQaSwjw[/youtube]

[b]Overlap[/b] level (+crt emulation, ugly due to YT compression)
[youtube]mJ3Infpvjlk[/youtube]