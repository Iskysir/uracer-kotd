[ x ] GAMEPLAY, RENDERING and CONSIDERATIONS

	x version information should be stored differently, git-log output shouldn't expose so much androidmanifest/etc..

	x LapInfo should be accessed as DriftInfo, single-lived components are better accessible than instance-owned one in this
	  design approach
	  
		- extrapolate the pattern and identify abstractable areas, create a SharedComponent interface with a more meaningful name

	x smoke due to skid marks, a simple and efficient implemention will do it
	x better total drift score's and real-time score's placement, dynamics, logic separation and appearance
	x improve drift detection, provide a simple way to manage different detection policies
	x improve the way missed drifts and associated drift points are exposed to the player *WHILE* playing and producing this event
	x determine optimal texture size for cars, fake ambient occlusion, skid marks and such



[ O ] AUDIO

	x car engine
		x pitch twiddling on the audio stream
		x latency?
		
	x while producing skid marks
		x latency?
		
	x on collision
		x LATENCY?
		
	o sound track
 		o (i don't give a shit about latency in this case)



[ x ] COLLISIONS

	x use collision groups, categories and bitmasking for better definitions


	 
[ x ] LIGHTING SYSTEM

	x 2d dynamic lighting system w/ realtime soft-shadows
	x light attachment to box2d objects
		x filtering system via groupIds then/or/else categoryBits and maskBits (order matters)
		
		x	+ light.groupId == fixture.groupId
		x		- if (groupId > 0) light will block at the fixture (generate shadow)
		x		- if (groupId < 0) light will ignore the fixture (no shadow)
			
		x	+ if ((light.maskBits & fixture.categoryBits) != 0)
		x		- light will block at the fixture
		x	+ else
		x		- light will ignore the fixture



[ X ] POST-PROCESSOR API

	x initial release
	x initial APIs
	x test shaders
	x port shaders
	x performance check against raw impl
		- hard-coded weights/offsets, per-vertex computations (24fps)
		- generic convolution filter, pre-computed values (passthrough vertex program), (22/23fps) sysmem-to-gpumem copy overhead?
		
	x stabilize APIs
		x public void render(FullscreenQuad quad, PingPongBuffer buffer)
		x public void render(FullscreenQuad quad, Texture source, FrameBuffer dest)
		x make sure the current API is flexible enough
	x chain filters to create effects, eg:
		x bloom
			x threshold
			x blur h
			x blur v
			x combine
		x zoom
			x zoom blur
	x filters should implement the setParam paradigm as the Combine filter is doing, will minimize the amount of shader's begin/end context switches
	  when updating ONE single value, not so good for updating multiple values per-frame, this need a bit of work..

[ X ] box2dlights update
	x same/better features than i need?[point in shader/point in light] faster? [not quite]
	x svn project in git?
	x NOT GOING TO UPDATE, SLOW IMPLEMENTATION JUST BY READING IT

[ ] GAME DATA
	- shared between Game and GameLogic
	- can only be modified by GameLogic
	- can be read by whoever need
		? contains DriftInfo
		? contains LapInfo
		? contains Player
		? no more getHud/getLevel in Game
		
[ ] car
	- draw wheels
	- get graphics' real size in pixels to permit artist to work on it, get pixel size at target resolution (1280x800)
	
[ ] investigate night-more + bloom + zoom performance drop?
[ ] document map definition, objects, tile types, lights, tileset settings, tile settings
[ ] think, menu as a game level?
[ ] think, cars for drift (max_grip = 3/4/5f), other cars (max_grip = 6/7/8f)
[ ] think, in car::compute_throttle, could be modulated by user's game settings?
[ ] task-based component system, when update() will use GameData shared data internally, thus no params, thus a task-based component system can be created, components'
data in GameData? GameData::<Component>?
[ ] look at, in night-mode, shadows don't take into account time aliasing, producing stuttering in a subframe-interpolated context.
[ ] event listeners as3-style
[ ] think, player drifts will raise a SuPeRpOwA-bAr, in seconds: these seconds can be consumed by using the time dilation super-power for the accumulated drift seconds! 