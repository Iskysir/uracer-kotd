#ifdef GL_ES
precision mediump float;
#endif

varying vec2 v_texCoord0;
uniform sampler2D u_texture0;

uniform float blur_div;
uniform float offset_x;
uniform float offset_y;
//uniform float one_on_blurlen;
uniform float zoom;

#ifndef BLUR_LENGTH
#error Please define a BLUR_LENGTH
#endif

#ifndef ONE_ON_BLUR_LENGTH
#error Please define a ONE_ON_BLUR_LENGTH
#endif

// avoid compile errors
#define BLUR_LEN			BLUR_LENGTH
#define ONE_ON_BLUR_LEN		ONE_ON_BLUR_LENGTH


// precompute blur factors (faster, loops will be unrolled)
const float blur_start = 1.0;

// performant version
void main()
{
    float scale = blur_start * zoom;
	vec2 o = vec2(offset_x, offset_y);

	vec4 c = vec4(0);
	for( int i = 0; i < BLUR_LEN; ++i )
	{
		c += texture2D(u_texture0, (v_texCoord0 * scale) + o);
		scale += blur_div;
	}

	gl_FragColor = c * ONE_ON_BLUR_LEN;
}


/*

//const float blur_width = -0.08;		// ctrl quantity
//const float blur_div = blur_width / float(blur_len);

void main()
{
	float scale = float(blur_start);
	float blurlen_f = float(blur_len);

	vec2 o = vec2(offset_x, offset_y);
	vec2 tc = v_texCoordsFx.st;

	vec4 c = vec4(0);
	for( int i = 0; i < blur_len; ++i )
	{
		c += texture2D(u_texture0, (tc * scale) + o);
		scale += blur_div;
	}

	c /= blurlen_f;
	gl_FragColor = c;
}
*/